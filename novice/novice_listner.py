import os
import sqlite3

import openpyxl
import requests
from aiogram import types, F, Router
from aiogram.types import ReactionTypeEmoji
from urllib.parse import quote

from bot_logger import log

file_xlsx_path = "novice/–ù–æ–≤–∏—á–∫–∏.xlsx"

def register(router: Router):
    @router.message(F.text.startswith("–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ: –ê–Ω–∫–µ—Ç–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞ –î–ü–°–û"))
    async def handler(message: types.Message):
        lines = message.text.strip().split('\n')
        answers = {}
        current_q = None
        for line in lines:
            line = line.strip()
            if line.startswith("Q:"):
                current_q = line[3:].strip()
            elif line.startswith("A:"):
                answers[current_q] = line[3:].strip()
        log(f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞: {answers}")
        save_to_db(answers)

        download_file_from_yandex_disk()
        await save_to_excel(answers, message)
        upload_file_to_yandex_disk()

        await message.react(reaction=[ReactionTypeEmoji(emoji="üëæ")])

    async def save_to_excel(answers, message: types.Message):
        full_name = answers.get("–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ", "")
        location = answers.get("–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–æ–∫+—Ä–∞–π–æ–Ω, –¥–µ—Ä–µ–≤–Ω—è+—Ä–∞–π–æ–Ω)", "")
        phone = answers.get("–¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ 8, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)", "")
        telegram = answers.get("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º", "")

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            wb = openpyxl.load_workbook(file_xlsx_path)
        except FileNotFoundError as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª {file_xlsx_path}")
            await message.react(reaction=[ReactionTypeEmoji(emoji="üò°")])
            raise e
        ws = wb.active
        ws.append([None, location, full_name, "", int(phone), telegram])
        wb.save(file_xlsx_path)

    def save_to_db(answers):
        conn = sqlite3.connect("db/novice.db")
        try:
            cursor = conn.cursor()

            full_name = answers.get("–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ", "")
            age = answers.get("–í–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?", "")
            location = answers.get("–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–æ–∫+—Ä–∞–π–æ–Ω, –¥–µ—Ä–µ–≤–Ω—è+—Ä–∞–π–æ–Ω)", "")
            phone = answers.get("–¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ 8, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)", "")
            telegram = answers.get("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º", "")
            has_car = answers.get("–ù–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ", "")
            previous_searches = answers.get("–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –í—ã —Ä–∞–Ω–µ–µ –≤ –ø–æ–∏—Å–∫–∞—Ö –ø—Ä–æ–ø–∞–≤—à–∏—Ö?", "")
            help_types = answers.get("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–º–æ—â–∏", "")
            how_learned = answers.get("–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ–± –æ—Ç—Ä—è–¥–µ?", "")
            other_info = answers.get("–ü–æ –∂–µ–ª–∞–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, —á–µ–≥–æ –Ω–µ—Ç –≤ –∞–Ω–∫–µ—Ç–µ", "")

            cursor.execute('''
                    INSERT INTO novice (full_name, age, location, phone, telegram, has_car, previous_searches, help_types, how_learned, other_info)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (full_name, age, location, phone, telegram, has_car, previous_searches, help_types, how_learned,
                      other_info))

            conn.commit()
        finally:
            conn.close()

    def download_file_from_yandex_disk():
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, –∏–Ω–∞—á–µ False.
        """
        disk_file_path = "–ù–æ–≤–∏—á–∫–∏.xlsx"
        base_url = "https://cloud-api.yandex.net/v1/disk/resources/download"
        oauth_token = os.getenv("OAUTH")
        headers = {
            'Authorization': f'OAuth {oauth_token}'
        }

        # 1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        encoded_path = quote(disk_file_path, safe='')
        params = {'path': disk_file_path}

        try:
            response = requests.get(base_url, headers=headers, params=params)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)

            download_data = response.json()
            download_url = download_data.get('href')

            if not download_url:
                log("–û—à–∏–±–∫–∞: 'href' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API.")
                return False

        except requests.exceptions.RequestException as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
        except ValueError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON
            log("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return False

        # 2. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É URL
        try:
            # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            download_response = requests.get(download_url, headers=headers)
            download_response.raise_for_status()

            with open(file_xlsx_path, 'wb') as f:
                f.write(download_response.content)
            log(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {file_xlsx_path}")
            return True

        except requests.exceptions.RequestException as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
        except IOError as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
            return False
        except Exception as e:
            log(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def upload_file_to_yandex_disk():
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.
        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: https://oauth.yandex.ru/authorize?response_type=token&client_id=<ClientID>
        """

        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞ —Å overwrite=true
        encoded_path = quote("–ù–æ–≤–∏—á–∫–∏.xlsx", safe='')  # –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è URL
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä overwrite=true –∫ URL
        upload_url_request = f"https://cloud-api.yandex.net/v1/disk/resources/upload?path={encoded_path}&overwrite=true"
        oauth_token = os.getenv("OAUTH")

        headers = {
            'Authorization': f'OAuth {oauth_token}'
        }

        try:
            # 2. –ó–∞–ø—Ä–æ—Å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            log("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é)...")
            response_get_url = requests.get(upload_url_request, headers=headers)

            if response_get_url.status_code == 200:
                upload_data = response_get_url.json()
                upload_href = upload_data.get('href')

                if not upload_href:
                    log("–û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.")
                    return

                log(f"–ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω).")

                # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É URL
                log(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {file_xlsx_path} ...")
                with open(file_xlsx_path, 'rb') as file:
                    # –í–∞–∂–Ω–æ: –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º OAuth —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ upload_href
                    response_upload = requests.put(upload_href, data=file)

                if response_upload.status_code in [201, 202]:  # 201 - —Å–æ–∑–¥–∞–Ω, 202 - –ø—Ä–∏–Ω—è—Ç
                    log(f"–§–∞–π–ª '–ù–æ–≤–∏—á–∫–∏.xlsx' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω) –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
                else:
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response_upload.status_code}")
                    log(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_upload.text}")

            elif response_get_url.status_code == 409:
                # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞ —Å overwrite=true, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {response_get_url.status_code}. "
                      f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_get_url.text}")
            else:
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response_get_url.status_code}")
                log(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_get_url.text}")

        except requests.exceptions.RequestException as e:
            log(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        except FileNotFoundError:
            log(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª '{file_xlsx_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            log(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")