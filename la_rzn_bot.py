import json
import random

from aiogram.filters import Command

import callbacks
import keyboard
from datetime import datetime, timedelta, time
import params
import db

from aiogram import Bot, Dispatcher, types
from aiogram.types import ErrorEvent
from dotenv import load_dotenv
from bot_logger import log
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

import os

load_dotenv()
bot = Bot(token=os.getenv("API_KEY"))
dp = Dispatcher()

message_text = f"""–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –≤–∑—è–ª–∏ —Å —Å–∞–π—Ç–∞ –ë–ö QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∏ —Å—Ä–∞–∑—É –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º*
{params.short_vote_link}
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @Serpus1

<i>*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</i>"""

callbacks.register(dp, bot)


# @dp.message(Command("test"))
async def test(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    # await bot.send_message(chat_id=chat_id_slujebka, text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# @dp.message(Command("message"))
async def send_message(message: types.Message):
    sent_message = await bot.send_photo(chat_id=params.la_chat_id, message_thread_id=params.bk_thread_id,
                                        photo=types.FSInputFile("resources/qr.png"),
                                        caption=message_text, parse_mode="HTML")
    log(f"ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
    params.set_reply_message_id(sent_message.message_id)
    params.set_last_message_id(0)


@dp.message(Command("daily"))
async def daily(message: types.Message):
    if message.chat.id == 649062985:
        await send_daily_message()


@dp.message(Command("stats"))
async def count_voters_per_day(message: types.Message):
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª voters.json –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    - –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (–±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º).
    - –° –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º YYYY-MM: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ + –∏—Ç–æ–≥.
    –ü—Ä–∏–º–µ—Ä: /stats 2025-03
    """
    if message.chat.id != 649062985:
        return
    filename = "resources/voters.json"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç (–º–µ—Å—è—Ü)
    args = message.text.strip().split()
    target_month = args[1] if len(args) > 1 else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Å—è—Ü–∞
    if target_month and not (len(target_month) == 7 and target_month[4] == '-'):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>YYYY-MM</code>, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>2025-03</code>.",
            parse_mode="HTML")
        return

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        log(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except json.JSONDecodeError as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
        return

    total_count_all = 0
    days_processed = 0
    sent_any_message = False

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    sorted_dates = sorted(data.keys())

    for date in sorted_dates:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã

        year_month = date[:7]  # YYYY-MM

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        if target_month and year_month != target_month:
            continue

        ids = data[date]
        if isinstance(ids, list):
            unique_ids = set(ids)
            count = len(unique_ids)
            total_count_all += count
            days_processed += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–µ—Å—è—Ü
            if target_month:
                stat_text = f"<b>{date}</b>: {count} —á–µ–ª–æ–≤–µ–∫"
                await message.answer(stat_text, parse_mode="HTML")
                sent_any_message = True
        else:
            log(f"{date}: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã (–Ω–µ —Å–ø–∏—Å–æ–∫)")

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if target_month:
        if days_processed == 0:
            await message.answer(f"üìÖ –ó–∞ –º–µ—Å—è—Ü <b>{target_month}</b> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö.", parse_mode="HTML")
        else:
            summary = (
                f"\nüìä <b>–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü {target_month}:</b>\n"
                f"‚Ä¢ –î–Ω–µ–π —Å –≥–æ–ª–æ—Å–∞–º–∏: {days_processed}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_count_all}"
            )
            await message.answer(summary, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–∏–π –∏—Ç–æ–≥
        if total_count_all == 0:
            await message.answer("üìÇ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.")
        else:
            summary = (
                f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n"
                f"‚Ä¢ –î–Ω–µ–π —Å –≥–æ–ª–æ—Å–∞–º–∏: {days_processed}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_count_all}"
            )
            await message.answer(summary, parse_mode="HTML")


@dp.message()
async def echo(message: types.Message):
    log(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id {message.message_id}, "
        f"–≥—Ä—É–ø–ø–∞ {message.chat.id}, "
        f"—Ç–µ–º–∞ {message.message_thread_id} (), "
        f"–æ—Ç {message.from_user.username}")


@dp.error()
async def handle_errors(error: ErrorEvent):
    log(f"–û—à–∏–±–∫–∞: {error}")


async def send_daily_message():
    for row in db.get_chats():
        chat_id = row.get("chat_id")
        try:
            message_id = params.get_last_message_id(chat_id)
            if message_id is not None:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            thread_id = db.get_thread_id(chat_id)
            if chat_id == -1001635093935:
                daily_message = params.generate_old_daily_message(chat_id)
            else:
                daily_message = params.generate_daily_message(chat_id)
            reply_message_id = params.get_reply_message_id(chat_id)
            button_keyboard = keyboard.get_vote_button_keyboard()
            sent_message = await bot.send_photo(chat_id=chat_id,
                                                message_thread_id=thread_id,
                                                photo=types.FSInputFile("resources/image.jpg"),
                                                caption=daily_message, parse_mode="HTML",
                                                reply_to_message_id=reply_message_id,
                                                reply_markup=button_keyboard)
            log(f"chat_id {chat_id}: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
            params.set_last_message_id(chat_id, sent_message.message_id)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def get_random_time_between_11_and_12():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 11:00 –∏ 11:59"""
    minute = random.randint(0, 29)
    second = random.randint(0, 59)
    return time(11, minute, second)


async def schedule_daily_job(scheduler: AsyncIOScheduler):
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    scheduler.remove_all_jobs()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
    random_time = get_random_time_between_11_and_12()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    scheduler.add_job(
        send_daily_message,
        trigger=CronTrigger(
            hour=random_time.hour,
            minute=random_time.minute,
            second=random_time.second,
            day="*"
        ),
        id="daily_message",
        replace_existing=True,
        name="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å 11 –¥–æ 12"
    )

    text = f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {random_time.strftime('%H:%M:%S')}"
    await bot.send_message(chat_id=649062985, text=text)
    log(text)


def get_next_10am(scheduler: AsyncIOScheduler) -> float:
    now = datetime.now(scheduler.timezone)
    next_10am = now.replace(hour=10, minute=0, second=0, microsecond=0) + timedelta(days=1)
    if now.time() < time(10, 0):
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –µ—â—ë –¥–æ 10:00, —Ç–æ –∂–¥—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö 10:00
        next_10am = now.replace(hour=10, minute=0, second=0, microsecond=0)
    delay = (next_10am - now).total_seconds()
    return max(delay, 0)


async def on_startup(scheduler: AsyncIOScheduler):
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
    await schedule_daily_job(scheduler)

    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—ã–ª–æ –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è)
    async def reschedule():
        while True:
            delay = get_next_10am(scheduler)
            await bot.send_message(chat_id=649062985,
                                   text=f"–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ 10:00. –û–∂–∏–¥–∞–Ω–∏–µ: {delay:.0f} —Å–µ–∫—É–Ω–¥...")
            log(f"–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ 10:00. –û–∂–∏–¥–∞–Ω–∏–µ: {delay:.0f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)
            await schedule_daily_job(scheduler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.create_task(reschedule())


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    scheduler.start()

    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ä–∞–∑—É –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    await on_startup(scheduler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
